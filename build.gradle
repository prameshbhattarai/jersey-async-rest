plugins {
    id 'java'
    id "application"
    id 'com.github.ben-manes.versions' version '0.51.0'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    javaMainClass = 'com.example.jerseyasyncrest.JerseyAsyncApplication'
    junitVersion = '5.11.3'
    log4jVersion = '3.0.0-beta2'
    jerseyVersion = '4.0.0-M1'
}

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

application {
    mainClass = javaMainClass
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    archiveFileName.set("jerseyAsyncApp.jar")
    manifest {
        attributes(
                'Main-Class': javaMainClass
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude "**/Log4j2Plugins.dat"
}

dependencies {
    implementation "org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:${jerseyVersion}"
    implementation "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.1"
    implementation "org.glassfish.jaxb:jaxb-runtime:4.0.3"

    implementation "org.apache.commons:commons-lang3:3.17.0"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-layout-template-json:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-jul:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    testImplementation("org.glassfish.jersey.test-framework:jersey-test-framework-core:${jerseyVersion}")
    testImplementation("org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:${jerseyVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}